m <- matrix(c(4,2,5,6,3,3,1,4,0,1),2,5)
m <- t(m)
c <- matrix(c(0,1,2,2),2,2)
c<-t(c)
m
clasificaciones <- kmeans(m,c,4)
clasificaciones
m <- cbind(clasificaciones$cluster,m)
m
m <- matrix(c(4,2,5,6,3,3,1,4,0,1),2,5)
m <- t(m)
clasificaciones <- kmeans(m,c,2)
m <- cbind(clasificaciones$cluster,m)
m
m <- matrix(c(4,2,5,6,3,3,1,4,0,1),2,5)
clasificaciones <- kmeans(m,c,1)
m <- matrix(c(4,2,5,6,3,3,1,4,0,1),2,5)
m <- t(m)
clasificaciones <- kmeans(m,c,1)
m <- cbind(clasificaciones$cluster,m)
m
m <- matrix(c(4,2,5,6,3,3,1,4,0,1),2,5)
m <- t(m)
plot(m)
clear()
muestra = matrix(c(9,2,4,6,4,5,3,7,5,6),2,5)
muestra <- t(muestra)
muestra
distancias <- as.matrix(dist(muestra))
distancias
distancias = matrix(distancias,5,5)
for(i in 1:5)
{
distancias[,i] = sort(distancias[,i])
};
(distanciasOrdenadas = distancias)
for(i in 1:5)
{
if(distanciasOrdenadas[4,i]>2.5)
{
print(i); print("es un suceso anÃ³malo o outlier")
}
}
B <- matrix(4,2,2)
B
(v <- 2*1:4)
v <- 2*1:4
v
matrix(1,2,3)
(A <- matrix(2,2,2))
A^A
y <- rep(0,n)
x0 <- (-10:10)
n <- length(x0)
n <- length(x0)
y <- rep(0,n)
y
install.packages("ggbiplot")
install.packages("XML")
install.packages("Rtools")
install.packages("Rtools")
R --version
--version
library("XML")
install.packages("Utf8")
install.packages("utf8")
install.packages("XML")
install.packages("XML")
library("XML")
library("XML")
install.packages("installr")
library(installr)
updateR()
library("XML")
install.packages("XML")
library("XML")
library("XML")
library("methods")
result <- xmlParse(file = "C:/Users/Usuario/Desktop/Universidad/Master/Diseño y uso de bd/Fuentes Pra1/rows.xml")
library("utf8")
install.packages("utf8")
result <- xmlParse(file = "C:/Users/Usuario/Desktop/Universidad/Master/Diseño y uso de bd/Fuentes Pra1/rows.xml")
library("XML")
library("methods")
result <- xmlParse(file = "C:/Users/Usuario/Desktop/Universidad/Master/Diseño y uso de bd/Fuentes Pra1/rows.xml")
df <- read.csv("C:/Users/Usuario/Downloads/Dades_de_trucades_operatives_gestionades_pel_CAT112.csv")
View(df)
install.packages("xmlconvert")
library(xmlconvert)
test <- xml_to_df(file = "C:/Users/Usuario/Desktop/rows.xml")
test <- xml_to_df(file = "C:/Users/Usuario/Desktop/rows.xml", records.xpath = "row")
install.packages(c("dplyr", "ggplot2", "tidyr"))
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
airport_raw<-read.csv("C:/Users/Usuario/Desktop/Universidad/Master/Estadistica Av/SFO.csv",
sep=",",na.strings = "NA")
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
airport_raw<-read.csv("C:/Users/Usuario/Desktop/Universidad/Master/Estadistica Av/SFO.csv",
sep=",",na.strings = "NA")
head(airport_raw)
summary(airport_raw)
lineal_modela <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY, data = airport_raw)
summary(lineal_modela)
summary(lineal_modela)$r.squared
cor(x = airport_raw$DEPARTURE_DELAY, y = airport_raw$ARRIVAL_DELAY, use = "complete.obs")
lineal_modelb <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = airport_raw)
summary(lineal_modelb)
summary(lineal_modelb)$r.squared
datos_Mayor <- airport_raw[airport_raw$DISTANCE > 600,]
datos_Menor <- airport_raw[airport_raw$DISTANCE <= 600,]
head(datos_Mayor)
head(datos_Menor)
lineal_model_Mayor <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = datos_Mayor)
summary(lineal_model_Mayor)
lineal_model_Menor <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = datos_Menor)
summary(lineal_model_Menor)
airport_raw <- airport_raw %>% mutate(LATE_AIRCRAFT_DELAY = if_else( airport_raw$LATE_AIRCRAFT_DELAY > 15,
1,
0))
airport_raw$LATE_AIRCRAFT_DELAY <- as.factor(airport_raw$LATE_AIRCRAFT_DELAY)
summary(airport_raw$LATE_AIRCRAFT_DELAY)
lineal_multipleModel <- lm(DEPARTURE_DELAY ~ ARRIVAL_DELAY + LATE_AIRCRAFT_DELAY, data = airport_raw)
summary(lineal_multipleModel)
summary(lineal_multipleModel)$r.squared
summary(lineal_modelb)
residuos <- lineal_modelb$residuals
valores_ajustados <- lineal_modelb$fitted.values
plot(x = valores_ajustados, y = residuos)
stdres = rstandard(lineal_modelb)
qqnorm(lineal_modelb$residuals)
qqline(lineal_modelb$residuals)
predict_Value <- data.frame(ARRIVAL_DELAY = 30,
DISTANCE = 2500)
predict(lineal_modelb, predict_Value)
airport_raw$delay_SFO <- ifelse(airport_raw$DEPARTURE_DELAY < 15,
0,
1)
airport_raw$delay_SFO <- as.factor(airport_raw$delay_SFO)
airport_raw$AIRLINE <- as.factor(airport_raw$AIRLINE)
airport_raw$DAY_OF_WEEK <- as.factor(airport_raw$DAY_OF_WEEK)
visualizacion_AirlineColumna <- airport_raw %>%
group_by(delay_SFO, AIRLINE) %>%
tally() %>%
complete(AIRLINE, fill = list(n = 0)) %>%
mutate(percentage = n / sum(n) * 100)
ggplot(visualizacion_AirlineColumna, aes(AIRLINE, percentage, fill = delay_SFO)) +
geom_bar(stat = 'identity', position=position_dodge()) +
geom_text(aes(label=round(percentage)), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
facet_wrap(~ delay_SFO)+
theme_bw()
visualizacion_AirlineFila <- airport_raw %>%
group_by(AIRLINE, delay_SFO) %>%
tally() %>%
complete(delay_SFO, fill = list(n = 0)) %>%
mutate(percentage = n / sum(n) * 100)
ggplot(visualizacion_AirlineFila, aes(AIRLINE, percentage, fill = delay_SFO)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label=round(percentage)), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_bw()
visualizacion_DayColumna <- airport_raw %>%
group_by(delay_SFO, DAY_OF_WEEK) %>%
tally() %>%
complete(DAY_OF_WEEK, fill = list(n = 0)) %>%
mutate(percentage = n / sum(n) * 100)
ggplot(visualizacion_DayColumna, aes(DAY_OF_WEEK, percentage, fill = delay_SFO)) +
geom_bar(stat = 'identity', position=position_dodge()) +
geom_text(aes(label=round(percentage)), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5) +
facet_wrap(~ delay_SFO)+
theme_bw()
visualizacion_DayFila <- airport_raw %>%
group_by(DAY_OF_WEEK, delay_SFO) %>%
tally() %>%
complete(delay_SFO, fill = list(n = 0)) %>%
mutate(percentage = n / sum(n) * 100)
ggplot(visualizacion_DayFila, aes(DAY_OF_WEEK, percentage, fill = delay_SFO)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label=round(percentage)), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_bw()
chisq.test(airport_raw$delay_SFO, airport_raw$AIRLINE, correct = FALSE)
day_week_Rel <- relevel(airport_raw$DAY_OF_WEEK, ref = "1")
class(day_week_Rel)
model.logist1 <- glm(formula=delay_SFO~factor(day_week_Rel),family = binomial (link = logit))
model.logist1 <- glm(formula=delay_SFO~factor(day_week_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist1)
exp(coefficients(model.logist1))
table(airport_raw$delay_SFO,airport_raw$DAY_OF_WEEK)
table(airport_raw$delay_SFO,airport_raw$AIRLINE)
airline_Rel <- relevel(airport_raw$AIRLINE, ref = "AA")
class(airline_Rel)
model.logist2 <- glm(formula=delay_SFO~factor(airline_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist2)
model.logist3 <- glm(formula=delay_SFO~airline_Rel,data=airport_raw,family = binomial (link = logit))
summary(model.logist2)
model.logist3 <- glm(formula=delay_SFO~airline_Rel,data=airport_raw,family = binomial (link = logit))
summary(model.logist3)
model.logist3 <- glm(formula=delay_SFO~factor(day_week_Rel)+DISTANCE,data=airport_raw,family = binomial (link = logit))
summary(model.logist3)
logistic_Predict <- data.frame(day_week_Rel = 4,DISTANCE = 1500)
predict(model.logist3, logistic_Predict)
airport_raw$day_week_Rel <- relevel(airport_raw$DAY_OF_WEEK, ref = "1")
class(airport_raw$day_week_Rel)
model.logist1 <- glm(formula=delay_SFO~factor(day_week_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist1)
exp(coefficients(model.logist1))
model.logist3 <- glm(formula=delay_SFO~factor(day_week_Rel)+DISTANCE,data=airport_raw,family = binomial (link = logit))
summary(model.logist3)
logistic_Predict <- data.frame(day_week_Rel = 4,DISTANCE = 1500)
predict(model.logist3, logistic_Predict)
logistic_Predict <- data.frame(day_week_Rel = 4,DISTANCE = 1500)
predict(model.logist3, logistic_Predict, type="response")
install.packages(ResourceSelection))
install.packages(ResourceSelection)
library(ResourceSelection))
library(ResourceSelection)
install.packages("ResourceSelection")
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
library(ResourceSelection)
hoslem.test(delay_SFO,fitted(model.logist3))
hoslem.test(airport_raw$delay_SFO,fitted(model.logist3))
airport_raw$airline_Rel <- relevel(airport_raw$AIRLINE, ref = "AA")
class(airline_Rel)
model.logist2 <- glm(formula=delay_SFO~factor(airline_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist2)
model.logist3 <- glm(formula=delay_SFO~factor(day_week_Rel)+DISTANCE,data=airport_raw,family = binomial (link = logit))
summary(model.logist3)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
library(ResourceSelection)
library(pROC)
install.packages("pROC")
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
library(ResourceSelection)
library(pROC)
prob=predict(model.logist3, airport_raw, type="response")
r=roc(delay_SFO,prob, data=airport_raw)
prob=predict(model.logist3, airport_raw, type="response")
r=roc(airport_raw$delay_SFO,prob, data=airport_raw)
plot(r)
auc(r)
model.logist4 <- glm(formula=delay_SFO~factor(day_week_Rel)+factor(airline_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist3)
prob2=predict(model.logist4, airport_raw, type="response")
r2=roc(airport_raw$delay_SFO,prob2, data=airport_raw)
plot(r2)
model.logist4 <- glm(formula=delay_SFO~factor(day_week_Rel)+factor(airline_Rel),data=airport_raw,family = binomial (link = logit))
summary(model.logist4)
model.logist4 <- glm(formula=delay_SFO~factor(day_week_Rel)+factor(airline_Rel)+ARRIVAL_DELAY,data=airport_raw,family = binomial (link = logit))
summary(model.logist4)
prob2=predict(model.logist4, airport_raw, type="response")
r2=roc(airport_raw$delay_SFO,prob2, data=airport_raw)
plot(r2)
auc(r2)
cor(x = airport_raw$DEPARTURE_DELAY, y = airport_raw$ARRIVAL_DELAY, use = "complete.obs")^2
cor(x = airport_raw$DEPARTURE_DELAY, y = airport_raw$ARRIVAL_DELAY, use = "complete.obs")
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(MASS)
library(ResourceSelection)
library(pROC)
airport_raw<-read.csv("C:/Users/Usuario/Desktop/Universidad/Master/Estadistica Av/SFO.csv",
sep=",",na.strings = "NA")
head(airport_raw)
summary(airport_raw)
lineal_modela <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY, data = airport_raw)
summary(lineal_modela)
summary(lineal_modela)$r.squared
cor(x = airport_raw$DEPARTURE_DELAY, y = airport_raw$ARRIVAL_DELAY, use = "complete.obs")
lineal_modelb <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = airport_raw)
summary(lineal_modelb)
summary(lineal_modelb)$r.squared
datos_Mayor <- airport_raw[airport_raw$DISTANCE > 600,]
datos_Menor <- airport_raw[airport_raw$DISTANCE <= 600,]
head(datos_Mayor)
head(datos_Menor)
lineal_model_Mayor <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = datos_Mayor)
summary(lineal_model_Mayor)
lineal_model_Menor <- lm(DEPARTURE_DELAY~ARRIVAL_DELAY + DISTANCE, data = datos_Menor)
summary(lineal_model_Menor)
airport_raw <- airport_raw %>% mutate(LATE_AIRCRAFT_DELAY = if_else( airport_raw$LATE_AIRCRAFT_DELAY > 15,
1,
0))
airport_raw$LATE_AIRCRAFT_DELAY <- as.factor(airport_raw$LATE_AIRCRAFT_DELAY)
summary(airport_raw$LATE_AIRCRAFT_DELAY)
lineal_multipleModel <- lm(DEPARTURE_DELAY ~ ARRIVAL_DELAY + LATE_AIRCRAFT_DELAY, data = airport_raw)
summary(lineal_multipleModel)
summary(lineal_multipleModel)$r.squared
summary(lineal_modelb)
plot(lineal_modelb[0])
plot(lineal_modelb)[0]
-8.811^-02
-8.811^-02
-0.08823
fact<-as.factor(c(rep(1,6),rep(2,6),rep(3,6)))
fact
rep(1,6)
c(rep(1,6),rep(2,6),rep(3,6))
y<- c(20,17,15,19,14,13,
18,17,14,20,13,12,
23,25,20,21,19,20)
fact<-as.factor(c(rep(1,6),rep(2,6),rep(3,6)))
df<-data.frame(y,fact)
df
help(tapply)
getwd()
setwd("C:\Users\Usuario\Desktop\Universidad\Master\Pra2\PRA2-Tipologia-de-datos")
setwd("C:/Users/Usuario/Desktop/Universidad/Master/Pra2/PRA2-Tipologia-de-datos")
data1 <- read.csv("../csv/train.csv")
data1 <- read.csv("./csv/train.csv")
head(data1)
summary(data1)
str(data1)
View(data1)
library(dplyr)
library(dplyr)
#lectura archivo
titanic_raw <- read.csv("./csv/train.csv")
#observamos la estructura de los datos
str(titanic_raw)
summary(titanic_raw)
#eliminamos columnas
titanic <- subset(titanic_raw, select= -c(PassengerId,Name,Cabin, Ticket))
nic$Survived)
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$Sex <- as.factor(titanic$Sex)
titanic$Embarked <- as.factor(titanic$Embarked)
titanic$Survived <- as.factor(titanic$Survived)
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$Sex <- as.factor(titanic$Sex)
titanic$Embarked <- as.factor(titanic$Embarked)
class(titanic$Survived)
levels(titanic$Survived)
levels(titanic$Pclass)
levels(titanic$Sex)
levels(titanic$Embarked)
titanic[titanic$Embarked=="",]
